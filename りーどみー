 各機能が実装可能かどうかの確認が目的なので、再度作り直す必要があります。
 現状だと馬の管理に問題有り。
 ベースがあればそれに合わせて配置していきます。

// --------- 仕様書について ----------
1.2 実装に必要な機能
1.2.1 馬をスポーンさせる
-> 能力値の固定はコマンド実行するプレイヤーごと or プラグイン全体で固定？
1.2.2 馬をデスポーンさせる
-> 1つのサーバーで複数のゲームができることを視野に入れた場合、コースごとに馬を管理してコース内の馬のみをデスポーンさせる必要有り？
1.3 出来れば実装してほしい機能
1.3.1 画面表示
-> 要調査。 順位の判定方法？
1.3.3 チェックポイント
-> スタート、チェックポイント、ゴールのエリアの指定方法をどうするか？
-> チェックポイントの増設・移設を視野に入れて決定。
1.3.5 アイテム配布ブロック
-> 配布方法？

- その他
・道路が交差するコース、周回コース、スタート地点ゴール地点が同じ・違うコース、分岐の発生するコース、螺旋状のコースを考慮する
・自動再起動プラグインによる終了の回避
・各機能を適切なクラスに配置する(馬の管理クラス等)
・馬の個体番号管理要変更

// ---------- パーミッション管理について ----------
 パーミッション管理はBukkit内蔵のもの(PermissionBukkit?)を使うか、あるいは外部プラグインにも対応するか決定する必要あり。
 外部プラグインを使うのであれば、どのプラグインを使うか要確認
 複数のパーミッション管理プラグインに対応することも可能。

 (参考) http://dmitriymx.ru/blog/bukkit-tutorial/rabota-s-permissions.html

// ---------- その他確認中の仕様 ----------
・能力値初期値の馬は3blockの高さは飛び越えることが可能。 少なくとも高さ4block判定すること
・サーバーリスタート後はEntityIDは更新され、metadataは除去される？ UUIDは維持される？
-> 維持されるようです。 horse.getUID().hashCode()を使います。

// ---------- 流れのサンプル ----------
(用語)
待合室: 参加登録後、抽選等により参加者の決定の結果を待つ部屋。
待機室: 参加決定後移動する部屋。 馬の確保や装備を提供する。
// フィールドの設定
1. /mhr field create (fieldName)
2. /mhr field set 待合室
3. /mhr field set 準備室
4. /mhr field set コース
5. /mhr field set start
6. /mhr field set goal
7. /mhr field set add checkpoint (fieldName) (checkpointName)
8. (チェックポイントの並び替え・設定等)

// ゲームの進行
1. /mhr game create (fieldName) (人数) [先着順 / 抽選]
2. /mhr game 参加確定プレイヤーの追加
3. /mhr game 募集開始
4. /mhr game 募集締切 / 抽選 当選した人は準備室へ
5. /mhr game ready 全員をコースに移動
6. /mhr game start
7. /mhr game end ゴールしていないプレイヤーがいても終了
8. /mhr game result 結果を表示
9. /mhr game close ゲームを閉じる

// ########## 以下、このプラグインについて ##########

// ---------- コマンド ----------
/mhr sample [text1] [text2] [text3] ...
-> echo

/mhr spawn (個体数)
-> 指定された数だけ馬をスポーンする。
-> 能力値の変動は未実装。

/mhr despawn [個体番号]
-> 指定された馬またはプラグイン管理下の馬を全てデスポーンする。

/mhr tp (個体番号) [プレイヤー] [フラグ]
-> プレイヤーが搭乗していない指定された馬を指定されたプレイヤーまたは自分にテレポートする。
-> フラグがtrueであればプレイヤーが搭乗している場合もテレポートする。

/mhr alltp [プレイヤー] [フラグ]
-> プレイヤーが搭乗していない全ての馬を指定されたプレイヤーまたは自分にテレポートする。
-> フラグがtrueであればプレイヤーが搭乗している馬もテレポートする。

// ---------- エリア選択 ----------
 stickを手に持ち、左クリック・右クリックすることでエリアの選択可能。
 現状では選択した範囲にプレイヤーが入ってきた場合にメッセージがエリアを選択したプレイヤーに送信されるようになっている。

// ---------- コマンド追加方法について ----------
(プレイヤーコマンド /mhr newCommand [args] を追加するとする)
1. BaseCommand クラスを継承したクラスを継承した NewCommand クラスを作成
2. SampleCommand クラスを参考にコンストラクタ・onCommand(Player sender, ArrayList<String> args)メソッドをオーバーライド。
3. MHRCommandExecutor クラスの指定部分に下記を追加。
	commands.add(new NewCommand(this.plugin, "newCommand")); // この場合 "/mhr newCommand [args]" に応答する

 コンソールコマンドを実装するにはonCommand(ConsoleCommandSender sender, ArrayList<String> args)メソッドをオーバーライドすること。